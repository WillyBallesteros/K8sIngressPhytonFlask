###################################
# offer-management
###################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: offer-management
  labels:
    app: offer-management
spec:
  replicas: 1
  selector:
    matchLabels:
      app: offer-management
  template:
    metadata:
      labels:
        app: offer-management
    spec:
      containers:
        - name: offer-management
          image: us-central1-docker.pkg.dev/miso-dann/delivery-miso-grupo-17/offer_management:1.0
          env:
            - name: "DELIVERY_DATABASE_URI"
              valueFrom:
                secretKeyRef:
                  name: appsecrets
                  key: uri
          ports:
            - containerPort: 3003
          # Realizar pull siempre a la imagen
          imagePullPolicy: Always

---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: delivery-offer-management-config
spec:
  healthCheck:
    checkIntervalSec: 30
    port: 3003
    type: HTTP
    requestPath: /offers/ping
---
kind: Service
apiVersion: v1
metadata:
  name: servicio-offer-management
  annotations:
    cloud.google.com/backend-config: '{"default": "delivery-offer-management-config"}'
spec:
  type: NodePort
  selector:
    app: offer-management
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3003
      nodePort: 30109

---
###################################
# offer-rf004-management
###################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: offer-rf004-management
  labels:
    app: offer-rf004-management
spec:
  replicas: 1
  selector:
    matchLabels:
      app: offer-rf004-management
  template:
    metadata:
      labels:
        app: offer-rf004-management
    spec:
      containers:
        - name: offer-rf004-management
          image: us-central1-docker.pkg.dev/miso-dann/delivery-miso-grupo-17/offer_rf004_management:1.0

          ports:
            - containerPort: 3013
          env:
              - name: OFFER_MS
                value: http://servicio-offer-management
          # Realizar pull siempre a la imagen
          imagePullPolicy: Always

---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: delivery-offer-rf004-management-config
spec:
  healthCheck:
    checkIntervalSec: 30
    port: 3013
    type: HTTP
    requestPath: /rf004/ping
---
kind: Service
apiVersion: v1
metadata:
  name: servicio-offer-rf004-management
  annotations:
    cloud.google.com/backend-config: '{"default": "delivery-offer-rf004-management-config"}'
spec:
  type: NodePort
  selector:
    app: offer-rf004-management
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3013
      nodePort: 30113
---
###################################
# score
###################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: score
  labels:
    app: score
spec:
  replicas: 1
  selector:
    matchLabels:
      app: score
  template:
    metadata:
      labels:
        app: score
    spec:
      containers:
        - name: score
          image: us-central1-docker.pkg.dev/miso-dann/delivery-miso-grupo-17/score:1.0

          ports:
            - containerPort: 3020
          imagePullPolicy: Always

---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: delivery-score-config
spec:
  healthCheck:
    checkIntervalSec: 30
    port: 3020
    type: HTTP
    requestPath: /score/ping
---
kind: Service
apiVersion: v1
metadata:
  name: servicio-score
  annotations:
    cloud.google.com/backend-config: '{"default": "delivery-score-config"}'
spec:
  type: NodePort
  selector:
    app: score
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3020
      nodePort: 31020
---
###################################
# post-management
###################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: post-management
  labels:
    app: post-management
spec:
  replicas: 1
  selector:
    matchLabels:
      app: post-management
  template:
    metadata:
      labels:
        app: post-management
    spec:
      containers:
        - name: post-management
          image: us-central1-docker.pkg.dev/miso-dann/delivery-miso-grupo-17/post_management:1.0
          env:
            - name: "DELIVERY_DATABASE_URI"
              valueFrom:
                secretKeyRef:
                  name: appsecrets
                  key: uri
          ports:
            - containerPort: 3001
          # Realizar pull siempre a la imagen
          imagePullPolicy: Always

---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: delivery-post-management-config
spec:
  healthCheck:
    checkIntervalSec: 30
    port: 3001
    type: HTTP
    requestPath: /posts/health
---
kind: Service
apiVersion: v1
metadata:
  name: servicio-post-management
  annotations:
    cloud.google.com/backend-config: '{"default": "delivery-post-management-config"}'
spec:
  type: NodePort
  selector:
    app: post-management
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3001
      nodePort: 30020

---
###################################
# route-management
###################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: route-management
  labels:
    app: route-management
spec:
  replicas: 1
  selector:
    matchLabels:
      app: route-management
  template:
    metadata:
      labels:
        app: route-management
    spec:
      containers:
        - name: route-management
          image: us-central1-docker.pkg.dev/miso-dann/delivery-miso-grupo-17/route_management:1.0
          env:
            - name: "DELIVERY_DATABASE_URI"
              valueFrom:
                secretKeyRef:
                  name: appsecrets
                  key: uri
          ports:
            - containerPort: 3002
          # Realizar pull siempre a la imagen
          imagePullPolicy: Always

---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: delivery-route-management-config
spec:
  healthCheck:
    checkIntervalSec: 30
    port: 3002
    type: HTTP
    requestPath: /routes/health
---
kind: Service
apiVersion: v1
metadata:
  name: servicio-route-management
  annotations:
    cloud.google.com/backend-config: '{"default": "delivery-route-management-config"}'
spec:
  type: NodePort
  selector:
    app: route-management
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3002
      nodePort: 30021

---
###################################
# user-management
###################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-management
  labels:
    app: user-management
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-management
  template:
    metadata:
      labels:
        app: user-management
    spec:
      containers:
        - name: user-management
          image: us-central1-docker.pkg.dev/miso-dann/delivery-miso-grupo-17/user_management:1.0
          env:
            - name: "DELIVERY_DATABASE_URI"
              valueFrom:
                secretKeyRef:
                  name: appsecrets
                  key: uri
          ports:
            - containerPort: 3000
          # Realizar pull siempre a la imagen
          imagePullPolicy: Always

---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: delivery-user-management-config
spec:
  healthCheck:
    checkIntervalSec: 30
    port: 3000
    type: HTTP
    requestPath: /users/health
---
kind: Service
apiVersion: v1
metadata:
  name: servicio-user-management
  annotations:
    cloud.google.com/backend-config: '{"default": "delivery-user-management-config"}'
spec:
  type: NodePort
  selector:
    app: user-management
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
      nodePort: 30022

---
###################################
# post_rf003_management
###################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: post-rf003-management
  labels:
    app: post-rf003-management
spec:
  replicas: 1
  selector:
    matchLabels:
      app: post-rf003-management
  template:
    metadata:
      labels:
        app: post-rf003-management
    spec:
      containers:
        - name: post-rf003-management
          image: us-central1-docker.pkg.dev/miso-dann/delivery-miso-grupo-17/post_rf003_management:1.0
          env:
            - name: ROUTE_SERVICE_URL
              value: http://route-management
            - name: POST_SERVICE_URL
              value: http://post-management
            - name: "DELIVERY_DATABASE_URI"
              valueFrom:
                secretKeyRef:
                  name: appsecrets
                  key: uri
          ports:
            - containerPort: 3005
          imagePullPolicy: Always

---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: delivery-post-rf003-management-config
spec:
  healthCheck:
    checkIntervalSec: 30
    port: 3005
    type: HTTP
    requestPath: /rf003/health

---
kind: Service
apiVersion: v1
metadata:
  name: servicio-post-rf003-management
  annotations:
    cloud.google.com/backend-config: '{"default": "delivery-post-rf003-management-config"}'
spec:
  type: NodePort
  selector:
    app: post-rf003-management
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3005
      nodePort: 30025

---
###################################
# INGRESS
###################################
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gateway-ingress-delivery
  labels:
    name: gateway-ingress-delivery
spec:
  rules:
  - http:
      paths:
      - pathType: Prefix
        path: /offers
        backend:
          service:
            name: servicio-offer-management
            port:
              number: 80
      - pathType: Prefix
        path: /rf004
        backend:
          service:
            name: servicio-offer-rf004-management
            port:
              number: 80
      - pathType: Prefix
        path: /posts
        backend:
          service:
            name: servicio-post-management
            port:
              number: 80
      - pathType: Prefix
        path: /routes
        backend:
          service:
            name: servicio-route-management
            port:
              number: 80
      - pathType: Prefix
        path: /users
        backend:
          service:
            name: servicio-user-management
            port:
              number: 80
      - pathType: Prefix
        path: /rf003
        backend:
          service:
            name: servicio-post-rf003-management
            port:
              number: 80